{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\speak\\\\Desktop\\\\CSMessagingApp\\\\frontend\\\\src\\\\components\\\\AgentDashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AgentDashboard = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    // Fetch messages from backend\n    fetch('http://localhost:5000/api/messages') // Your backend API endpoint\n    .then(response => response.json()) // Convert the response to JSON\n    .then(data => {\n      console.log(data); // Log the entire response to check the structure\n      if (data.urgentMessages && data.normalMessages) {\n        // Combine urgent and normal messages into one array\n        setMessages([...data.urgentMessages, ...data.normalMessages]);\n      } else {\n        console.error(\"Expected urgentMessages and normalMessages but got:\", data);\n      }\n      setLoading(false); // Set loading to false after data is fetched\n    }).catch(error => {\n      console.error(\"Error fetching messages:\", error);\n      setLoading(false); // Set loading to false even if there's an error\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Agent Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading messages...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 11\n      }, this) : messages.length > 0 ? /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: message.customer\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 37,\n            columnNumber: 17\n          }, this), \": \", message.message]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No messages to display.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n};\n_s(AgentDashboard, \"iENrkQA4ceL8nzHtV8t1eR+7xGM=\");\n_c = AgentDashboard;\nexport default AgentDashboard;\nvar _c;\n$RefreshReg$(_c, \"AgentDashboard\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","AgentDashboard","_s","messages","setMessages","loading","setLoading","fetch","then","response","json","data","console","log","urgentMessages","normalMessages","error","catch","children","fileName","_jsxFileName","lineNumber","columnNumber","length","map","message","index","customer","_c","$RefreshReg$"],"sources":["C:/Users/speak/Desktop/CSMessagingApp/frontend/src/components/AgentDashboard.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nconst AgentDashboard = () => {\r\n  const [messages, setMessages] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    // Fetch messages from backend\r\n    fetch('http://localhost:5000/api/messages')  // Your backend API endpoint\r\n      .then(response => response.json())        // Convert the response to JSON\r\n      .then(data => {\r\n        console.log(data);  // Log the entire response to check the structure\r\n        if (data.urgentMessages && data.normalMessages) {\r\n          // Combine urgent and normal messages into one array\r\n          setMessages([...data.urgentMessages, ...data.normalMessages]);\r\n        } else {\r\n          console.error(\"Expected urgentMessages and normalMessages but got:\", data);\r\n        }\r\n        setLoading(false);  // Set loading to false after data is fetched\r\n      })\r\n      .catch(error => {\r\n        console.error(\"Error fetching messages:\", error);\r\n        setLoading(false);  // Set loading to false even if there's an error\r\n      });\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <h2>Agent Dashboard</h2>\r\n      <div>\r\n        {loading ? (\r\n          <p>Loading messages...</p>\r\n        ) : messages.length > 0 ? (\r\n          <ul>\r\n            {messages.map((message, index) => (\r\n              <li key={index}>\r\n                <strong>{message.customer}</strong>: {message.message}\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        ) : (\r\n          <p>No messages to display.</p>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AgentDashboard;\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,cAAc,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3B,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACQ,OAAO,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EAE5CC,SAAS,CAAC,MAAM;IACd;IACAS,KAAK,CAAC,oCAAoC,CAAC,CAAE;IAAA,CAC1CC,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CAAQ;IAAA,CACzCF,IAAI,CAACG,IAAI,IAAI;MACZC,OAAO,CAACC,GAAG,CAACF,IAAI,CAAC,CAAC,CAAE;MACpB,IAAIA,IAAI,CAACG,cAAc,IAAIH,IAAI,CAACI,cAAc,EAAE;QAC9C;QACAX,WAAW,CAAC,CAAC,GAAGO,IAAI,CAACG,cAAc,EAAE,GAAGH,IAAI,CAACI,cAAc,CAAC,CAAC;MAC/D,CAAC,MAAM;QACLH,OAAO,CAACI,KAAK,CAAC,qDAAqD,EAAEL,IAAI,CAAC;MAC5E;MACAL,UAAU,CAAC,KAAK,CAAC,CAAC,CAAE;IACtB,CAAC,CAAC,CACDW,KAAK,CAACD,KAAK,IAAI;MACdJ,OAAO,CAACI,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MAChDV,UAAU,CAAC,KAAK,CAAC,CAAC,CAAE;IACtB,CAAC,CAAC;EACN,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEN,OAAA;IAAAkB,QAAA,gBACElB,OAAA;MAAAkB,QAAA,EAAI;IAAe;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACxBtB,OAAA;MAAAkB,QAAA,EACGb,OAAO,gBACNL,OAAA;QAAAkB,QAAA,EAAG;MAAmB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,GACxBnB,QAAQ,CAACoB,MAAM,GAAG,CAAC,gBACrBvB,OAAA;QAAAkB,QAAA,EACGf,QAAQ,CAACqB,GAAG,CAAC,CAACC,OAAO,EAAEC,KAAK,kBAC3B1B,OAAA;UAAAkB,QAAA,gBACElB,OAAA;YAAAkB,QAAA,EAASO,OAAO,CAACE;UAAQ;YAAAR,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAS,CAAC,MAAE,EAACG,OAAO,CAACA,OAAO;QAAA,GAD9CC,KAAK;UAAAP,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAEV,CACL;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACA,CAAC,gBAELtB,OAAA;QAAAkB,QAAA,EAAG;MAAuB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG;IAC9B;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACpB,EAAA,CA5CID,cAAc;AAAA2B,EAAA,GAAd3B,cAAc;AA8CpB,eAAeA,cAAc;AAAC,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}