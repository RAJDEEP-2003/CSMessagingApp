{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\speak\\\\Desktop\\\\CSMessagingApp\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// frontend/src/App.js\nimport React, { useState, useEffect } from 'react';\nimport AgentLogin from './components/AgentLogin';\nimport MessageForm from './components/MessageForm';\nimport MessageItem from './components/MessageItem';\nimport MessageDetails from './components/MessageDetails';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [agentId, setAgentId] = useState(null);\n  const [selectedMessage, setSelectedMessage] = useState(null); // New state for selected message\n\n  // Fetch messages assigned to the logged-in agent\n  useEffect(() => {\n    if (agentId) {\n      fetch(`http://localhost:5000/api/messages?agentId=${agentId}`).then(response => response.json()).then(data => setMessages(data)).catch(error => console.error('Error fetching messages:', error));\n    }\n  }, [agentId]);\n  const handleFormSubmit = formData => {\n    fetch('http://localhost:5000/api/messages', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(formData)\n    }).then(response => response.json()).then(data => setMessages(prevMessages => [...prevMessages, data])).catch(error => console.error('Error posting message:', error));\n  };\n  const handleLogin = agentId => {\n    setAgentId(agentId); // Set the logged-in agent ID\n  };\n\n  // Handle message click to show details\n  const handleMessageClick = message => {\n    setSelectedMessage(message); // Set selected message to view details\n  };\n  const handleResponseSubmit = (messageId, response) => {\n    const cleanedMessageId = messageId.trim();\n    fetch(`http://localhost:5000/api/messages/${cleanedMessageId}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        response,\n        agentId\n      })\n    }).then(response => response.json()).then(updatedMessage => {\n      setMessages(prevMessages => prevMessages.map(message => message._id === updatedMessage._id ? updatedMessage : message));\n    }).catch(error => console.error('Error updating message:', error));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: !agentId ? /*#__PURE__*/_jsxDEV(AgentLogin, {\n      onLogin: handleLogin\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [\"Welcome Agent \", agentId]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(MessageForm, {\n        onSubmit: handleFormSubmit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Messages:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: messages.map(message => /*#__PURE__*/_jsxDEV(MessageItem, {\n          message: message,\n          onResponseSubmit: handleResponseSubmit,\n          isUrgent: message.urgent,\n          onClick: () => handleMessageClick(message) // Pass click handler to each message\n        }, message._id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(MessageDetail, {\n        message: selectedMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"ne38zxzetQQk7ZwoTv5PlT6gaQQ=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","AgentLogin","MessageForm","MessageItem","MessageDetails","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","messages","setMessages","agentId","setAgentId","selectedMessage","setSelectedMessage","fetch","then","response","json","data","catch","error","console","handleFormSubmit","formData","method","headers","body","JSON","stringify","prevMessages","handleLogin","handleMessageClick","message","handleResponseSubmit","messageId","cleanedMessageId","trim","updatedMessage","map","_id","children","onLogin","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","onResponseSubmit","isUrgent","urgent","onClick","MessageDetail","_c","$RefreshReg$"],"sources":["C:/Users/speak/Desktop/CSMessagingApp/frontend/src/App.js"],"sourcesContent":["// frontend/src/App.js\r\nimport React, { useState, useEffect } from 'react';\r\nimport AgentLogin from './components/AgentLogin';\r\nimport MessageForm from './components/MessageForm';\r\nimport MessageItem from './components/MessageItem';\r\nimport MessageDetails from './components/MessageDetails';\r\n\r\nconst App = () => {\r\n  const [messages, setMessages] = useState([]);\r\n  const [agentId, setAgentId] = useState(null);\r\n  const [selectedMessage, setSelectedMessage] = useState(null); // New state for selected message\r\n\r\n  // Fetch messages assigned to the logged-in agent\r\n  useEffect(() => {\r\n    if (agentId) {\r\n      fetch(`http://localhost:5000/api/messages?agentId=${agentId}`)\r\n        .then((response) => response.json())\r\n        .then((data) => setMessages(data))\r\n        .catch((error) => console.error('Error fetching messages:', error));\r\n    }\r\n  }, [agentId]);\r\n\r\n  const handleFormSubmit = (formData) => {\r\n    fetch('http://localhost:5000/api/messages', {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify(formData),\r\n    })\r\n      .then((response) => response.json())\r\n      .then((data) => setMessages((prevMessages) => [...prevMessages, data]))\r\n      .catch((error) => console.error('Error posting message:', error));\r\n  };\r\n\r\n  const handleLogin = (agentId) => {\r\n    setAgentId(agentId);  // Set the logged-in agent ID\r\n  };\r\n\r\n  // Handle message click to show details\r\n  const handleMessageClick = (message) => {\r\n    setSelectedMessage(message); // Set selected message to view details\r\n  };\r\n\r\n  const handleResponseSubmit = (messageId, response) => {\r\n    const cleanedMessageId = messageId.trim();\r\n    \r\n    fetch(`http://localhost:5000/api/messages/${cleanedMessageId}`, {\r\n      method: 'PUT',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify({ response, agentId }),\r\n    })\r\n      .then((response) => response.json())\r\n      .then((updatedMessage) => {\r\n        setMessages((prevMessages) =>\r\n          prevMessages.map((message) =>\r\n            message._id === updatedMessage._id ? updatedMessage : message\r\n          )\r\n        );\r\n      })\r\n      .catch((error) => console.error('Error updating message:', error));\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {!agentId ? (\r\n        <AgentLogin onLogin={handleLogin} />\r\n      ) : (\r\n        <>\r\n          <h1>Welcome Agent {agentId}</h1>\r\n          <MessageForm onSubmit={handleFormSubmit} />\r\n          <h2>Messages:</h2>\r\n          <ul>\r\n            {messages.map((message) => (\r\n              <MessageItem\r\n                key={message._id}\r\n                message={message}\r\n                onResponseSubmit={handleResponseSubmit}\r\n                isUrgent={message.urgent}\r\n                onClick={() => handleMessageClick(message)} // Pass click handler to each message\r\n              />\r\n            ))}\r\n          </ul>\r\n\r\n          {/* Display selected message details */}\r\n          <MessageDetail message={selectedMessage} />\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}