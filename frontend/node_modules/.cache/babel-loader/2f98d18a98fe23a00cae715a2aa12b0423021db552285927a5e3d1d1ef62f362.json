{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\speak\\\\Desktop\\\\CSMessagingApp\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport MessageForm from './components/MessageForm'; // Import your MessageForm component\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [newMessage, setNewMessage] = useState('');\n\n  // Fetch messages when the component mounts\n  useEffect(() => {\n    fetch('http://localhost:5000/api/messages') // Make a GET request to backend API\n    .then(response => response.json()).then(data => setMessages(data)) // Store the fetched messages in state\n    .catch(error => console.error('Error fetching messages:', error));\n  }, []);\n\n  // Handle form submission (send POST request to backend)\n  const handleFormSubmit = event => {\n    event.preventDefault();\n    const formData = {\n      customer: 'Customer Name',\n      // You can replace this with a dynamic customer name if needed\n      message: newMessage\n    };\n    fetch('http://localhost:5000/api/messages', {\n      // POST request to the backend\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(formData) // Send the message data as JSON\n    }).then(response => response.json()).then(data => {\n      setMessages(prevMessages => [...prevMessages, data]);\n      setNewMessage(''); // Clear the input after submitting\n    }).catch(error => console.error('Error posting message:', error));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Customer Service Messaging\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleFormSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n        value: newMessage,\n        onChange: e => setNewMessage(e.target.value),\n        placeholder: \"Write a message...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Messages:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: [message.customer, \":\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 13\n        }, this), \" \", message.message]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"ppYy//Iy9fHF0/R/fKleZlFUFyc=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","MessageForm","jsxDEV","_jsxDEV","App","_s","messages","setMessages","newMessage","setNewMessage","fetch","then","response","json","data","catch","error","console","handleFormSubmit","event","preventDefault","formData","customer","message","method","headers","body","JSON","stringify","prevMessages","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","value","onChange","e","target","placeholder","type","map","index","_c","$RefreshReg$"],"sources":["C:/Users/speak/Desktop/CSMessagingApp/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport MessageForm from './components/MessageForm';  // Import your MessageForm component\r\n\r\nconst App = () => {\r\n  const [messages, setMessages] = useState([]);\r\n  const [newMessage, setNewMessage] = useState('');\r\n\r\n  // Fetch messages when the component mounts\r\n  useEffect(() => {\r\n    fetch('http://localhost:5000/api/messages')  // Make a GET request to backend API\r\n      .then((response) => response.json())\r\n      .then((data) => setMessages(data))  // Store the fetched messages in state\r\n      .catch((error) => console.error('Error fetching messages:', error));\r\n  }, []);\r\n\r\n  // Handle form submission (send POST request to backend)\r\n  const handleFormSubmit = (event) => {\r\n    event.preventDefault();\r\n\r\n    const formData = {\r\n      customer: 'Customer Name',  // You can replace this with a dynamic customer name if needed\r\n      message: newMessage,\r\n    };\r\n\r\n    fetch('http://localhost:5000/api/messages', {  // POST request to the backend\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(formData),  // Send the message data as JSON\r\n    })\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        setMessages((prevMessages) => [...prevMessages, data]);\r\n        setNewMessage('');  // Clear the input after submitting\r\n      })\r\n      .catch((error) => console.error('Error posting message:', error));\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>Customer Service Messaging</h1>\r\n      \r\n      {/* Message form */}\r\n      <form onSubmit={handleFormSubmit}>\r\n        <textarea\r\n          value={newMessage}\r\n          onChange={(e) => setNewMessage(e.target.value)}\r\n          placeholder=\"Write a message...\"\r\n        />\r\n        <button type=\"submit\">Send</button>\r\n      </form>\r\n\r\n      <h2>Messages:</h2>\r\n      <ul>\r\n        {messages.map((message, index) => (\r\n          <li key={index}>\r\n            <strong>{message.customer}:</strong> {message.message}\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}