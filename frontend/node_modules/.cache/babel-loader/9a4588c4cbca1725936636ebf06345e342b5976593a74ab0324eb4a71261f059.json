{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\speak\\\\Desktop\\\\CSMessagingApp\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport MessageForm from './components/MessageForm'; // Import your MessageForm component\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [newMessage, setNewMessage] = useState('');\n\n  // Fetch messages when the component mounts\n  useEffect(() => {\n    fetch('http://localhost:5000/api/messages') // Make a GET request to backend API\n    .then(response => response.json()).then(data => setMessages(data)) // Store the fetched messages in state\n    .catch(error => console.error('Error fetching messages:', error));\n  }, []);\n\n  // Handle form submission (send POST request to backend)\n  const handleFormSubmit = event => {\n    event.preventDefault();\n    const formData = {\n      customer: 'Customer Name',\n      // Replace with dynamic customer name if needed\n      message: newMessage\n    };\n    fetch('http://localhost:5000/api/messages', {\n      // POST request to the backend\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(formData) // Send the message data as JSON\n    }).then(response => response.json()).then(data => {\n      setMessages(prevMessages => [...prevMessages, data]);\n      setNewMessage(''); // Clear the input after submitting\n    }).catch(error => console.error('Error posting message:', error));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      fontFamily: 'Arial, sans-serif',\n      padding: '20px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      style: {\n        textAlign: 'center'\n      },\n      children: \"Customer Service Messaging\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleFormSubmit,\n      style: {\n        marginBottom: '20px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n        value: newMessage,\n        onChange: e => setNewMessage(e.target.value),\n        placeholder: \"Write a message...\",\n        style: {\n          width: '100%',\n          height: '100px',\n          padding: '10px',\n          fontSize: '16px'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        style: {\n          padding: '10px 20px',\n          fontSize: '16px'\n        },\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Messages:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      style: {\n        listStyleType: 'none',\n        padding: '0'\n      },\n      children: messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        style: {\n          marginBottom: '15px',\n          lineHeight: '1.5'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: message.customer\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 13\n        }, this), \" -\", ' ', /*#__PURE__*/_jsxDEV(\"em\", {\n          children: new Date(message.timestamp).toLocaleString()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 13\n        }, this), \":\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 69\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: message.message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 13\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"ppYy//Iy9fHF0/R/fKleZlFUFyc=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","MessageForm","jsxDEV","_jsxDEV","App","_s","messages","setMessages","newMessage","setNewMessage","fetch","then","response","json","data","catch","error","console","handleFormSubmit","event","preventDefault","formData","customer","message","method","headers","body","JSON","stringify","prevMessages","style","fontFamily","padding","children","textAlign","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","marginBottom","value","onChange","e","target","placeholder","width","height","fontSize","type","listStyleType","map","index","lineHeight","Date","timestamp","toLocaleString","_c","$RefreshReg$"],"sources":["C:/Users/speak/Desktop/CSMessagingApp/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport MessageForm from './components/MessageForm'; // Import your MessageForm component\r\n\r\nconst App = () => {\r\n  const [messages, setMessages] = useState([]);\r\n  const [newMessage, setNewMessage] = useState('');\r\n\r\n  // Fetch messages when the component mounts\r\n  useEffect(() => {\r\n    fetch('http://localhost:5000/api/messages') // Make a GET request to backend API\r\n      .then((response) => response.json())\r\n      .then((data) => setMessages(data)) // Store the fetched messages in state\r\n      .catch((error) => console.error('Error fetching messages:', error));\r\n  }, []);\r\n\r\n  // Handle form submission (send POST request to backend)\r\n  const handleFormSubmit = (event) => {\r\n    event.preventDefault();\r\n\r\n    const formData = {\r\n      customer: 'Customer Name', // Replace with dynamic customer name if needed\r\n      message: newMessage,\r\n    };\r\n\r\n    fetch('http://localhost:5000/api/messages', { // POST request to the backend\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(formData), // Send the message data as JSON\r\n    })\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        setMessages((prevMessages) => [...prevMessages, data]);\r\n        setNewMessage(''); // Clear the input after submitting\r\n      })\r\n      .catch((error) => console.error('Error posting message:', error));\r\n  };\r\n\r\n  return (\r\n    <div style={{ fontFamily: 'Arial, sans-serif', padding: '20px' }}>\r\n      <h1 style={{ textAlign: 'center' }}>Customer Service Messaging</h1>\r\n\r\n      {/* Message form */}\r\n      <form onSubmit={handleFormSubmit} style={{ marginBottom: '20px' }}>\r\n        <textarea\r\n          value={newMessage}\r\n          onChange={(e) => setNewMessage(e.target.value)}\r\n          placeholder=\"Write a message...\"\r\n          style={{ width: '100%', height: '100px', padding: '10px', fontSize: '16px' }}\r\n        />\r\n        <br />\r\n        <button type=\"submit\" style={{ padding: '10px 20px', fontSize: '16px' }}>Send</button>\r\n      </form>\r\n\r\n      <h2>Messages:</h2>\r\n      <ul style={{ listStyleType: 'none', padding: '0' }}>\r\n        {messages.map((message, index) => (\r\n          <li key={index} style={{ marginBottom: '15px', lineHeight: '1.5' }}>\r\n            <strong>{message.customer}</strong> -{' '}\r\n            <em>{new Date(message.timestamp).toLocaleString()}</em>:<br />\r\n            <span>{message.message}</span>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}