{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\speak\\\\Desktop\\\\CSMessagingApp\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport MessageForm from './components/MessageForm'; // Import your MessageForm component\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n\n  // Fetch messages when the component mounts\n  useEffect(() => {\n    fetch('http://localhost:5000/api/messages') // Make a GET request to backend API\n    .then(response => response.json()).then(data => setMessages(data)) // Store the fetched messages in state\n    .catch(error => console.error('Error fetching messages:', error));\n  }, []);\n\n  // Handle form submission (send POST request to backend)\n  const handleFormSubmit = formData => {\n    // Add a timestamp when the message is being submitted\n    const messageWithTimestamp = {\n      ...formData,\n      timestamp: new Date().toISOString() // Automatically generate the timestamp\n    };\n    fetch('http://localhost:5000/api/messages', {\n      // POST request to the backend\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(messageWithTimestamp) // Send the message data as JSON\n    }).then(response => response.json()).then(data => {\n      setMessages(prevMessages => [...prevMessages, data]);\n    }).catch(error => console.error('Error posting message:', error));\n  };\n\n  // Helper function to format the timestamp\n  const formatTimestamp = timestamp => {\n    const date = new Date(timestamp);\n    if (isNaN(date)) {\n      return 'Invalid Date'; // Handle invalid date\n    }\n    return date.toLocaleString(); // Format the date to a readable format\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Customer Service Messaging\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MessageForm, {\n      onSubmit: handleFormSubmit\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Messages:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: message.customer\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 13\n        }, this), \" -\", ' ', /*#__PURE__*/_jsxDEV(\"em\", {\n          children: formatTimestamp(message.timestamp)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 13\n        }, this), \": \", message.message]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"RyA59LRbn9goj/9N7rELX+NWNVI=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","MessageForm","jsxDEV","_jsxDEV","App","_s","messages","setMessages","fetch","then","response","json","data","catch","error","console","handleFormSubmit","formData","messageWithTimestamp","timestamp","Date","toISOString","method","headers","body","JSON","stringify","prevMessages","formatTimestamp","date","isNaN","toLocaleString","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","map","message","index","customer","_c","$RefreshReg$"],"sources":["C:/Users/speak/Desktop/CSMessagingApp/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport MessageForm from './components/MessageForm'; // Import your MessageForm component\r\n\r\nconst App = () => {\r\n  const [messages, setMessages] = useState([]);\r\n\r\n  // Fetch messages when the component mounts\r\n  useEffect(() => {\r\n    fetch('http://localhost:5000/api/messages') // Make a GET request to backend API\r\n      .then((response) => response.json())\r\n      .then((data) => setMessages(data)) // Store the fetched messages in state\r\n      .catch((error) => console.error('Error fetching messages:', error));\r\n  }, []);\r\n\r\n  // Handle form submission (send POST request to backend)\r\n  const handleFormSubmit = (formData) => {\r\n    // Add a timestamp when the message is being submitted\r\n    const messageWithTimestamp = {\r\n      ...formData,\r\n      timestamp: new Date().toISOString(), // Automatically generate the timestamp\r\n    };\r\n\r\n    fetch('http://localhost:5000/api/messages', { // POST request to the backend\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(messageWithTimestamp), // Send the message data as JSON\r\n    })\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        setMessages((prevMessages) => [...prevMessages, data]);\r\n      })\r\n      .catch((error) => console.error('Error posting message:', error));\r\n  };\r\n\r\n  // Helper function to format the timestamp\r\n  const formatTimestamp = (timestamp) => {\r\n    const date = new Date(timestamp);\r\n    if (isNaN(date)) {\r\n      return 'Invalid Date'; // Handle invalid date\r\n    }\r\n    return date.toLocaleString(); // Format the date to a readable format\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>Customer Service Messaging</h1>\r\n\r\n      {/* Message form */}\r\n      <MessageForm onSubmit={handleFormSubmit} />\r\n\r\n      <h2>Messages:</h2>\r\n      <ul>\r\n        {messages.map((message, index) => (\r\n          <li key={index}>\r\n            <strong>{message.customer}</strong> -{' '}\r\n            <em>{formatTimestamp(message.timestamp)}</em>: {message.message}\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}