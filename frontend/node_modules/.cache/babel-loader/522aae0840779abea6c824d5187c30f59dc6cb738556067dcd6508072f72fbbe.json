{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\speak\\\\Desktop\\\\CSMessagingApp\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport AgentLogin from './components/AgentLogin';\nimport AgentDashboard from './components/AgentDashboard';\nimport MessageDetails from './components/MessageDetails'; // Message details to show specific message\nimport './App.css'; // Import the global CSS here\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [agentId, setAgentId] = useState(null);\n  const [selectedMessage, setSelectedMessage] = useState(null);\n\n  // Fetch messages assigned to the logged-in agent\n  useEffect(() => {\n    if (agentId) {\n      fetch(`http://localhost:5000/api/messages?agentId=${agentId}`).then(response => response.json()).then(data => setMessages(data)).catch(error => console.error('Error fetching messages:', error));\n    }\n  }, [agentId]);\n  const handleLogin = agentId => {\n    setAgentId(agentId); // Set the logged-in agent ID\n  };\n  const handleMessageClick = message => {\n    setSelectedMessage(message); // Set selected message to view details\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: !agentId ? /*#__PURE__*/_jsxDEV(AgentLogin, {\n      onLogin: handleLogin\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(AgentDashboard, {\n        messages: messages,\n        onMessageClick: handleMessageClick\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 11\n      }, this), selectedMessage && /*#__PURE__*/_jsxDEV(MessageDetails, {\n        message: selectedMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 31\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"ne38zxzetQQk7ZwoTv5PlT6gaQQ=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","AgentLogin","AgentDashboard","MessageDetails","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","messages","setMessages","agentId","setAgentId","selectedMessage","setSelectedMessage","fetch","then","response","json","data","catch","error","console","handleLogin","handleMessageClick","message","children","onLogin","fileName","_jsxFileName","lineNumber","columnNumber","onMessageClick","_c","$RefreshReg$"],"sources":["C:/Users/speak/Desktop/CSMessagingApp/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport AgentLogin from './components/AgentLogin';\r\nimport AgentDashboard from './components/AgentDashboard';\r\nimport MessageDetails from './components/MessageDetails'; // Message details to show specific message\r\nimport './App.css'; // Import the global CSS here\r\n\r\nconst App = () => {\r\n  const [messages, setMessages] = useState([]);\r\n  const [agentId, setAgentId] = useState(null);\r\n  const [selectedMessage, setSelectedMessage] = useState(null);\r\n\r\n  // Fetch messages assigned to the logged-in agent\r\n  useEffect(() => {\r\n    if (agentId) {\r\n      fetch(`http://localhost:5000/api/messages?agentId=${agentId}`)\r\n        .then((response) => response.json())\r\n        .then((data) => setMessages(data))\r\n        .catch((error) => console.error('Error fetching messages:', error));\r\n    }\r\n  }, [agentId]);\r\n\r\n  const handleLogin = (agentId) => {\r\n    setAgentId(agentId);  // Set the logged-in agent ID\r\n  };\r\n\r\n  const handleMessageClick = (message) => {\r\n    setSelectedMessage(message); // Set selected message to view details\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {!agentId ? (\r\n        <AgentLogin onLogin={handleLogin} />\r\n      ) : (\r\n        <>\r\n          <AgentDashboard messages={messages} onMessageClick={handleMessageClick} />\r\n          {selectedMessage && <MessageDetails message={selectedMessage} />}\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,UAAU,MAAM,yBAAyB;AAChD,OAAOC,cAAc,MAAM,6BAA6B;AACxD,OAAOC,cAAc,MAAM,6BAA6B,CAAC,CAAC;AAC1D,OAAO,WAAW,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAEpB,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACa,OAAO,EAAEC,UAAU,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACe,eAAe,EAAEC,kBAAkB,CAAC,GAAGhB,QAAQ,CAAC,IAAI,CAAC;;EAE5D;EACAC,SAAS,CAAC,MAAM;IACd,IAAIY,OAAO,EAAE;MACXI,KAAK,CAAC,8CAA8CJ,OAAO,EAAE,CAAC,CAC3DK,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACnCF,IAAI,CAAEG,IAAI,IAAKT,WAAW,CAACS,IAAI,CAAC,CAAC,CACjCC,KAAK,CAAEC,KAAK,IAAKC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC,CAAC;IACvE;EACF,CAAC,EAAE,CAACV,OAAO,CAAC,CAAC;EAEb,MAAMY,WAAW,GAAIZ,OAAO,IAAK;IAC/BC,UAAU,CAACD,OAAO,CAAC,CAAC,CAAE;EACxB,CAAC;EAED,MAAMa,kBAAkB,GAAIC,OAAO,IAAK;IACtCX,kBAAkB,CAACW,OAAO,CAAC,CAAC,CAAC;EAC/B,CAAC;EAED,oBACErB,OAAA;IAAAsB,QAAA,EACG,CAACf,OAAO,gBACPP,OAAA,CAACJ,UAAU;MAAC2B,OAAO,EAAEJ;IAAY;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,gBAEpC3B,OAAA,CAAAE,SAAA;MAAAoB,QAAA,gBACEtB,OAAA,CAACH,cAAc;QAACQ,QAAQ,EAAEA,QAAS;QAACuB,cAAc,EAAER;MAAmB;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,EACzElB,eAAe,iBAAIT,OAAA,CAACF,cAAc;QAACuB,OAAO,EAAEZ;MAAgB;QAAAe,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA,eAChE;EACH;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAACvB,EAAA,CAnCID,GAAG;AAAA0B,EAAA,GAAH1B,GAAG;AAqCT,eAAeA,GAAG;AAAC,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}