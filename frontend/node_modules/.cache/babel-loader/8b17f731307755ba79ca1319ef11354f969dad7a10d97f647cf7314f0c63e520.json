{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\speak\\\\Desktop\\\\CSMessagingApp\\\\frontend\\\\src\\\\components\\\\AgentDashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AgentDashboard = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [reply, setReply] = useState('');\n  const [selectedMessageId, setSelectedMessageId] = useState(null);\n  const [statusFilter, setStatusFilter] = useState('');\n  const [searchQuery, setSearchQuery] = useState('');\n  useEffect(() => {\n    const fetchMessages = async () => {\n      try {\n        const queryParam = statusFilter ? `?status=${statusFilter}` : '';\n        const response = await fetch(`http://localhost:5000/api/messages${queryParam}`);\n        const data = await response.json();\n        setMessages(Array.isArray(data) ? data : []);\n      } catch (error) {\n        console.error('Error fetching messages:', error);\n      }\n    };\n    fetchMessages();\n  }, [statusFilter]);\n  const handleReplySubmit = async id => {\n    if (!reply.trim()) {\n      alert('Reply cannot be empty.');\n      return;\n    }\n    try {\n      const response = await fetch(`http://localhost:5000/api/messages/${id}`, {\n        method: 'PATCH',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          reply,\n          status: 'resolved'\n        })\n      });\n      if (response.ok) {\n        alert('Reply sent successfully!');\n        setReply('');\n        setSelectedMessageId(null);\n        const updatedMessages = await fetch(`http://localhost:5000/api/messages`);\n        const data = await updatedMessages.json();\n        setMessages(data);\n      } else {\n        alert('Error replying to the message.');\n      }\n    } catch (error) {\n      console.error('Error sending reply:', error);\n    }\n  };\n  const filteredMessages = messages.filter(message => message.customer.toLowerCase().includes(searchQuery.toLowerCase()) || message.message.toLowerCase().includes(searchQuery.toLowerCase()));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Agent Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Search by User ID or Message\",\n      value: searchQuery,\n      onChange: e => setSearchQuery(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setStatusFilter('pending'),\n      children: \"Pending\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setStatusFilter('resolved'),\n      children: \"Resolved\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setStatusFilter(''),\n      children: \"All\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: filteredMessages.map(message => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"User ID: \", message.customer]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Message: \", message.message]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Status: \", message.status]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 13\n        }, this), message.status !== 'resolved' && /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setSelectedMessageId(message._id),\n          children: \"Reply\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 15\n        }, this), selectedMessageId === message._id && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n            value: reply,\n            onChange: e => setReply(e.target.value),\n            placeholder: \"Type your reply...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleReplySubmit(message._id),\n            children: \"Submit Reply\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 15\n        }, this)]\n      }, message._id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n};\n_s(AgentDashboard, \"RiDxFX9Lj2endgQuYEwBSlaBrbQ=\");\n_c = AgentDashboard;\nexport default AgentDashboard;\nvar _c;\n$RefreshReg$(_c, \"AgentDashboard\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","AgentDashboard","_s","messages","setMessages","reply","setReply","selectedMessageId","setSelectedMessageId","statusFilter","setStatusFilter","searchQuery","setSearchQuery","fetchMessages","queryParam","response","fetch","data","json","Array","isArray","error","console","handleReplySubmit","id","trim","alert","method","headers","body","JSON","stringify","status","ok","updatedMessages","filteredMessages","filter","message","customer","toLowerCase","includes","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","e","target","onClick","map","_id","_c","$RefreshReg$"],"sources":["C:/Users/speak/Desktop/CSMessagingApp/frontend/src/components/AgentDashboard.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nconst AgentDashboard = () => {\r\n  const [messages, setMessages] = useState([]);\r\n  const [reply, setReply] = useState('');\r\n  const [selectedMessageId, setSelectedMessageId] = useState(null);\r\n  const [statusFilter, setStatusFilter] = useState('');\r\n  const [searchQuery, setSearchQuery] = useState('');\r\n\r\n  useEffect(() => {\r\n    const fetchMessages = async () => {\r\n      try {\r\n        const queryParam = statusFilter ? `?status=${statusFilter}` : '';\r\n        const response = await fetch(`http://localhost:5000/api/messages${queryParam}`);\r\n        const data = await response.json();\r\n        setMessages(Array.isArray(data) ? data : []);\r\n      } catch (error) {\r\n        console.error('Error fetching messages:', error);\r\n      }\r\n    };\r\n\r\n    fetchMessages();\r\n  }, [statusFilter]);\r\n\r\n  const handleReplySubmit = async (id) => {\r\n    if (!reply.trim()) {\r\n      alert('Reply cannot be empty.');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const response = await fetch(`http://localhost:5000/api/messages/${id}`, {\r\n        method: 'PATCH',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ reply, status: 'resolved' }),\r\n      });\r\n\r\n      if (response.ok) {\r\n        alert('Reply sent successfully!');\r\n        setReply('');\r\n        setSelectedMessageId(null);\r\n        const updatedMessages = await fetch(`http://localhost:5000/api/messages`);\r\n        const data = await updatedMessages.json();\r\n        setMessages(data);\r\n      } else {\r\n        alert('Error replying to the message.');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error sending reply:', error);\r\n    }\r\n  };\r\n\r\n  const filteredMessages = messages.filter((message) =>\r\n    message.customer.toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n    message.message.toLowerCase().includes(searchQuery.toLowerCase())\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      <h2>Agent Dashboard</h2>\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Search by User ID or Message\"\r\n        value={searchQuery}\r\n        onChange={(e) => setSearchQuery(e.target.value)}\r\n      />\r\n      <button onClick={() => setStatusFilter('pending')}>Pending</button>\r\n      <button onClick={() => setStatusFilter('resolved')}>Resolved</button>\r\n      <button onClick={() => setStatusFilter('')}>All</button>\r\n      <ul>\r\n        {filteredMessages.map((message) => (\r\n          <li key={message._id}>\r\n            <p>User ID: {message.customer}</p>\r\n            <p>Message: {message.message}</p>\r\n            <p>Status: {message.status}</p>\r\n            {message.status !== 'resolved' && (\r\n              <button onClick={() => setSelectedMessageId(message._id)}>Reply</button>\r\n            )}\r\n            {selectedMessageId === message._id && (\r\n              <div>\r\n                <textarea\r\n                  value={reply}\r\n                  onChange={(e) => setReply(e.target.value)}\r\n                  placeholder=\"Type your reply...\"\r\n                ></textarea>\r\n                <button onClick={() => handleReplySubmit(message._id)}>Submit Reply</button>\r\n              </div>\r\n            )}\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AgentDashboard;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,cAAc,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3B,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACQ,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACU,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EAChE,MAAM,CAACY,YAAY,EAAEC,eAAe,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAACc,WAAW,EAAEC,cAAc,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EAElDC,SAAS,CAAC,MAAM;IACd,MAAMe,aAAa,GAAG,MAAAA,CAAA,KAAY;MAChC,IAAI;QACF,MAAMC,UAAU,GAAGL,YAAY,GAAG,WAAWA,YAAY,EAAE,GAAG,EAAE;QAChE,MAAMM,QAAQ,GAAG,MAAMC,KAAK,CAAC,qCAAqCF,UAAU,EAAE,CAAC;QAC/E,MAAMG,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;QAClCd,WAAW,CAACe,KAAK,CAACC,OAAO,CAACH,IAAI,CAAC,GAAGA,IAAI,GAAG,EAAE,CAAC;MAC9C,CAAC,CAAC,OAAOI,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MAClD;IACF,CAAC;IAEDR,aAAa,CAAC,CAAC;EACjB,CAAC,EAAE,CAACJ,YAAY,CAAC,CAAC;EAElB,MAAMc,iBAAiB,GAAG,MAAOC,EAAE,IAAK;IACtC,IAAI,CAACnB,KAAK,CAACoB,IAAI,CAAC,CAAC,EAAE;MACjBC,KAAK,CAAC,wBAAwB,CAAC;MAC/B;IACF;IAEA,IAAI;MACF,MAAMX,QAAQ,GAAG,MAAMC,KAAK,CAAC,sCAAsCQ,EAAE,EAAE,EAAE;QACvEG,MAAM,EAAE,OAAO;QACfC,OAAO,EAAE;UAAE,cAAc,EAAE;QAAmB,CAAC;QAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAE1B,KAAK;UAAE2B,MAAM,EAAE;QAAW,CAAC;MACpD,CAAC,CAAC;MAEF,IAAIjB,QAAQ,CAACkB,EAAE,EAAE;QACfP,KAAK,CAAC,0BAA0B,CAAC;QACjCpB,QAAQ,CAAC,EAAE,CAAC;QACZE,oBAAoB,CAAC,IAAI,CAAC;QAC1B,MAAM0B,eAAe,GAAG,MAAMlB,KAAK,CAAC,oCAAoC,CAAC;QACzE,MAAMC,IAAI,GAAG,MAAMiB,eAAe,CAAChB,IAAI,CAAC,CAAC;QACzCd,WAAW,CAACa,IAAI,CAAC;MACnB,CAAC,MAAM;QACLS,KAAK,CAAC,gCAAgC,CAAC;MACzC;IACF,CAAC,CAAC,OAAOL,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC9C;EACF,CAAC;EAED,MAAMc,gBAAgB,GAAGhC,QAAQ,CAACiC,MAAM,CAAEC,OAAO,IAC/CA,OAAO,CAACC,QAAQ,CAACC,WAAW,CAAC,CAAC,CAACC,QAAQ,CAAC7B,WAAW,CAAC4B,WAAW,CAAC,CAAC,CAAC,IAClEF,OAAO,CAACA,OAAO,CAACE,WAAW,CAAC,CAAC,CAACC,QAAQ,CAAC7B,WAAW,CAAC4B,WAAW,CAAC,CAAC,CAClE,CAAC;EAED,oBACEvC,OAAA;IAAAyC,QAAA,gBACEzC,OAAA;MAAAyC,QAAA,EAAI;IAAe;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACxB7C,OAAA;MACE8C,IAAI,EAAC,MAAM;MACXC,WAAW,EAAC,8BAA8B;MAC1CC,KAAK,EAAErC,WAAY;MACnBsC,QAAQ,EAAGC,CAAC,IAAKtC,cAAc,CAACsC,CAAC,CAACC,MAAM,CAACH,KAAK;IAAE;MAAAN,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACjD,CAAC,eACF7C,OAAA;MAAQoD,OAAO,EAAEA,CAAA,KAAM1C,eAAe,CAAC,SAAS,CAAE;MAAA+B,QAAA,EAAC;IAAO;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eACnE7C,OAAA;MAAQoD,OAAO,EAAEA,CAAA,KAAM1C,eAAe,CAAC,UAAU,CAAE;MAAA+B,QAAA,EAAC;IAAQ;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eACrE7C,OAAA;MAAQoD,OAAO,EAAEA,CAAA,KAAM1C,eAAe,CAAC,EAAE,CAAE;MAAA+B,QAAA,EAAC;IAAG;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eACxD7C,OAAA;MAAAyC,QAAA,EACGN,gBAAgB,CAACkB,GAAG,CAAEhB,OAAO,iBAC5BrC,OAAA;QAAAyC,QAAA,gBACEzC,OAAA;UAAAyC,QAAA,GAAG,WAAS,EAACJ,OAAO,CAACC,QAAQ;QAAA;UAAAI,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAClC7C,OAAA;UAAAyC,QAAA,GAAG,WAAS,EAACJ,OAAO,CAACA,OAAO;QAAA;UAAAK,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACjC7C,OAAA;UAAAyC,QAAA,GAAG,UAAQ,EAACJ,OAAO,CAACL,MAAM;QAAA;UAAAU,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,EAC9BR,OAAO,CAACL,MAAM,KAAK,UAAU,iBAC5BhC,OAAA;UAAQoD,OAAO,EAAEA,CAAA,KAAM5C,oBAAoB,CAAC6B,OAAO,CAACiB,GAAG,CAAE;UAAAb,QAAA,EAAC;QAAK;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CACxE,EACAtC,iBAAiB,KAAK8B,OAAO,CAACiB,GAAG,iBAChCtD,OAAA;UAAAyC,QAAA,gBACEzC,OAAA;YACEgD,KAAK,EAAE3C,KAAM;YACb4C,QAAQ,EAAGC,CAAC,IAAK5C,QAAQ,CAAC4C,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE;YAC1CD,WAAW,EAAC;UAAoB;YAAAL,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACvB,CAAC,eACZ7C,OAAA;YAAQoD,OAAO,EAAEA,CAAA,KAAM7B,iBAAiB,CAACc,OAAO,CAACiB,GAAG,CAAE;YAAAb,QAAA,EAAC;UAAY;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACzE,CACN;MAAA,GAhBMR,OAAO,CAACiB,GAAG;QAAAZ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAiBhB,CACL;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAEV,CAAC;AAAC3C,EAAA,CA3FID,cAAc;AAAAsD,EAAA,GAAdtD,cAAc;AA6FpB,eAAeA,cAAc;AAAC,IAAAsD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}