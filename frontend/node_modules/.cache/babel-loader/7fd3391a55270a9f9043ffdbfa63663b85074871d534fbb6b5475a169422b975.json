{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\speak\\\\Desktop\\\\CSMessagingApp\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// src/App.js\nimport React, { useState, useEffect } from 'react';\nimport MessageForm from './components/MessageForm'; // Correct the import path\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  // Fetch messages when the app loads\n  useEffect(() => {\n    fetch('http://localhost:5000/api/messages').then(response => response.json()).then(data => {\n      setMessages(data.data); // Assuming the response is in the format: { status, message, data: [messages] }\n      setLoading(false);\n    }).catch(error => {\n      console.error('Error fetching messages:', error);\n      setLoading(false);\n    });\n  }, []);\n  const handleFormSubmit = formData => {\n    // Send the form data to the backend (POST request)\n    fetch('http://localhost:5000/api/messages', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(formData)\n    }).then(response => response.json()).then(data => {\n      // After successfully sending data, update the messages state\n      setMessages(prevMessages => [...prevMessages, data.data]);\n    }).catch(error => console.error('Error sending message:', error));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Customer Service Messaging\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading messages...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(MessageForm, {\n        onSubmit: handleFormSubmit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Messages:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: [message.customer, \":\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 17\n          }, this), \" \", message.messageBody]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"iENrkQA4ceL8nzHtV8t1eR+7xGM=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","MessageForm","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","messages","setMessages","loading","setLoading","fetch","then","response","json","data","catch","error","console","handleFormSubmit","formData","method","headers","body","JSON","stringify","prevMessages","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","map","message","index","customer","messageBody","_c","$RefreshReg$"],"sources":["C:/Users/speak/Desktop/CSMessagingApp/frontend/src/App.js"],"sourcesContent":["// src/App.js\r\nimport React, { useState, useEffect } from 'react';\r\nimport MessageForm from './components/MessageForm'; // Correct the import path\r\n\r\nconst App = () => {\r\n  const [messages, setMessages] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  // Fetch messages when the app loads\r\n  useEffect(() => {\r\n    fetch('http://localhost:5000/api/messages')\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        setMessages(data.data); // Assuming the response is in the format: { status, message, data: [messages] }\r\n        setLoading(false);\r\n      })\r\n      .catch((error) => {\r\n        console.error('Error fetching messages:', error);\r\n        setLoading(false);\r\n      });\r\n  }, []);\r\n\r\n  const handleFormSubmit = (formData) => {\r\n    // Send the form data to the backend (POST request)\r\n    fetch('http://localhost:5000/api/messages', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(formData),\r\n    })\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        // After successfully sending data, update the messages state\r\n        setMessages((prevMessages) => [...prevMessages, data.data]);\r\n      })\r\n      .catch((error) => console.error('Error sending message:', error));\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>Customer Service Messaging</h1>\r\n      \r\n      {/* Render a loading indicator while messages are being fetched */}\r\n      {loading ? (\r\n        <p>Loading messages...</p>\r\n      ) : (\r\n        <>\r\n          <MessageForm onSubmit={handleFormSubmit} />\r\n          <h2>Messages:</h2>\r\n          <ul>\r\n            {messages.map((message, index) => (\r\n              <li key={index}>\r\n                <strong>{message.customer}:</strong> {message.messageBody}\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}