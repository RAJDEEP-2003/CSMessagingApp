{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\speak\\\\Desktop\\\\CSMessagingApp\\\\frontend\\\\src\\\\components\\\\AgentDashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AgentDashboard = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  useEffect(() => {\n    // Fetching messages from the backend\n    fetch('http://localhost:5000/api/messages') // Your backend API endpoint\n    .then(response => response.json()) // Convert the response to JSON\n    .then(data => {\n      if (Array.isArray(data)) {\n        setMessages(data); // Set the messages if it's an array\n      } else {\n        console.error(\"Expected an array of messages, but got:\", data);\n      }\n    }).catch(error => console.error(\"Error fetching messages:\", error)); // Handle fetch errors\n  }, []); // Empty dependency array means this runs once when the component mounts\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Agent Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: Array.isArray(messages) ? messages.length > 0 ? /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: message.customerName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 29,\n            columnNumber: 19\n          }, this), \": \", message.content]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 17\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No messages to display.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading messages...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 5\n  }, this);\n};\n_s(AgentDashboard, \"RyA59LRbn9goj/9N7rELX+NWNVI=\");\n_c = AgentDashboard;\nexport default AgentDashboard;\nvar _c;\n$RefreshReg$(_c, \"AgentDashboard\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","AgentDashboard","_s","messages","setMessages","fetch","then","response","json","data","Array","isArray","console","error","catch","children","fileName","_jsxFileName","lineNumber","columnNumber","length","map","message","index","customerName","content","_c","$RefreshReg$"],"sources":["C:/Users/speak/Desktop/CSMessagingApp/frontend/src/components/AgentDashboard.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nconst AgentDashboard = () => {\r\n  const [messages, setMessages] = useState([]);\r\n\r\n  useEffect(() => {\r\n    // Fetching messages from the backend\r\n    fetch('http://localhost:5000/api/messages')  // Your backend API endpoint\r\n      .then(response => response.json())        // Convert the response to JSON\r\n      .then(data => {\r\n        if (Array.isArray(data)) {\r\n          setMessages(data);                    // Set the messages if it's an array\r\n        } else {\r\n          console.error(\"Expected an array of messages, but got:\", data);\r\n        }\r\n      })\r\n      .catch(error => console.error(\"Error fetching messages:\", error)); // Handle fetch errors\r\n  }, []); // Empty dependency array means this runs once when the component mounts\r\n\r\n  return (\r\n    <div>\r\n      <h2>Agent Dashboard</h2>\r\n      <div>\r\n        {Array.isArray(messages) ? (\r\n          messages.length > 0 ? (\r\n            <ul>\r\n              {messages.map((message, index) => (\r\n                <li key={index}>\r\n                  <strong>{message.customerName}</strong>: {message.content}\r\n                </li>\r\n              ))}\r\n            </ul>\r\n          ) : (\r\n            <p>No messages to display.</p>\r\n          )\r\n        ) : (\r\n          <p>Loading messages...</p>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AgentDashboard;\r\n\r\n\r\n\r\n\r\n\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,cAAc,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3B,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAE5CC,SAAS,CAAC,MAAM;IACd;IACAO,KAAK,CAAC,oCAAoC,CAAC,CAAE;IAAA,CAC1CC,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CAAQ;IAAA,CACzCF,IAAI,CAACG,IAAI,IAAI;MACZ,IAAIC,KAAK,CAACC,OAAO,CAACF,IAAI,CAAC,EAAE;QACvBL,WAAW,CAACK,IAAI,CAAC,CAAC,CAAoB;MACxC,CAAC,MAAM;QACLG,OAAO,CAACC,KAAK,CAAC,yCAAyC,EAAEJ,IAAI,CAAC;MAChE;IACF,CAAC,CAAC,CACDK,KAAK,CAACD,KAAK,IAAID,OAAO,CAACC,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC,CAAC,CAAC,CAAC;EACvE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,oBACEb,OAAA;IAAAe,QAAA,gBACEf,OAAA;MAAAe,QAAA,EAAI;IAAe;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACxBnB,OAAA;MAAAe,QAAA,EACGL,KAAK,CAACC,OAAO,CAACR,QAAQ,CAAC,GACtBA,QAAQ,CAACiB,MAAM,GAAG,CAAC,gBACjBpB,OAAA;QAAAe,QAAA,EACGZ,QAAQ,CAACkB,GAAG,CAAC,CAACC,OAAO,EAAEC,KAAK,kBAC3BvB,OAAA;UAAAe,QAAA,gBACEf,OAAA;YAAAe,QAAA,EAASO,OAAO,CAACE;UAAY;YAAAR,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAS,CAAC,MAAE,EAACG,OAAO,CAACG,OAAO;QAAA,GADlDF,KAAK;UAAAP,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAEV,CACL;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACA,CAAC,gBAELnB,OAAA;QAAAe,QAAA,EAAG;MAAuB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAC9B,gBAEDnB,OAAA;QAAAe,QAAA,EAAG;MAAmB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG;IAC1B;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACjB,EAAA,CAvCID,cAAc;AAAAyB,EAAA,GAAdzB,cAAc;AAyCpB,eAAeA,cAAc;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}