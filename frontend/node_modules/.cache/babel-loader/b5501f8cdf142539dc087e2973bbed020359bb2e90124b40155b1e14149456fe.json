{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\speak\\\\Desktop\\\\CSMessagingApp\\\\frontend\\\\src\\\\components\\\\AgentDashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AgentDashboard = ({\n  username\n}) => {\n  _s();\n  const [messages, setMessages] = useState([]);\n\n  // Simulate fetching messages from the backend\n  useEffect(() => {\n    // This would normally be an API call (fetch data from your backend)\n    // Example:\n    fetch('/api/messages') // Make sure you have a route set up to fetch messages\n    .then(response => response.json()).then(data => setMessages(data)).catch(err => console.error('Error fetching messages:', err));\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Welcome, \", username, \"!\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"User Messages\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"User ID\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 23,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Timestamp\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 24,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Message\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 25,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Status\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 26,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Action\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 27,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: message.customer\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 33,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: new Date(message.timestamp).toLocaleString()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 34,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: message.message\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 35,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: message.status || 'Open'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 36,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: message.status === 'Open' ? /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => {\n                // Here you can add the logic to mark the message as resolved\n                // Update the message status in your backend and refresh the table\n                fetch(`/api/messages/${message._id}`, {\n                  method: 'PATCH',\n                  body: JSON.stringify({\n                    status: 'Resolved'\n                  }),\n                  headers: {\n                    'Content-Type': 'application/json'\n                  }\n                }).then(response => response.json()).then(updatedMessage => {\n                  setMessages(prevMessages => prevMessages.map(msg => msg._id === updatedMessage._id ? updatedMessage : msg));\n                }).catch(err => console.error('Error updating message status:', err));\n              },\n              children: \"Mark as Resolved\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 39,\n              columnNumber: 19\n            }, this) : 'Resolved'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 37,\n            columnNumber: 15\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 5\n  }, this);\n};\n_s(AgentDashboard, \"RyA59LRbn9goj/9N7rELX+NWNVI=\");\n_c = AgentDashboard;\nexport default AgentDashboard;\nvar _c;\n$RefreshReg$(_c, \"AgentDashboard\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","AgentDashboard","username","_s","messages","setMessages","fetch","then","response","json","data","catch","err","console","error","children","fileName","_jsxFileName","lineNumber","columnNumber","map","message","index","customer","Date","timestamp","toLocaleString","status","onClick","_id","method","body","JSON","stringify","headers","updatedMessage","prevMessages","msg","_c","$RefreshReg$"],"sources":["C:/Users/speak/Desktop/CSMessagingApp/frontend/src/components/AgentDashboard.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\n\r\nconst AgentDashboard = ({ username }) => {\r\n  const [messages, setMessages] = useState([]);\r\n\r\n  // Simulate fetching messages from the backend\r\n  useEffect(() => {\r\n    // This would normally be an API call (fetch data from your backend)\r\n    // Example:\r\n    fetch('/api/messages')  // Make sure you have a route set up to fetch messages\r\n      .then(response => response.json())\r\n      .then(data => setMessages(data))\r\n      .catch(err => console.error('Error fetching messages:', err));\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <h2>Welcome, {username}!</h2>\r\n      <h3>User Messages</h3>\r\n      <table>\r\n        <thead>\r\n          <tr>\r\n            <th>User ID</th>\r\n            <th>Timestamp</th>\r\n            <th>Message</th>\r\n            <th>Status</th>\r\n            <th>Action</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {messages.map((message, index) => (\r\n            <tr key={index}>\r\n              <td>{message.customer}</td>\r\n              <td>{new Date(message.timestamp).toLocaleString()}</td>\r\n              <td>{message.message}</td>\r\n              <td>{message.status || 'Open'}</td>\r\n              <td>\r\n                {message.status === 'Open' ? (\r\n                  <button\r\n                    onClick={() => {\r\n                      // Here you can add the logic to mark the message as resolved\r\n                      // Update the message status in your backend and refresh the table\r\n                      fetch(`/api/messages/${message._id}`, {\r\n                        method: 'PATCH',\r\n                        body: JSON.stringify({ status: 'Resolved' }),\r\n                        headers: { 'Content-Type': 'application/json' },\r\n                      })\r\n                        .then(response => response.json())\r\n                        .then(updatedMessage => {\r\n                          setMessages((prevMessages) =>\r\n                            prevMessages.map((msg) =>\r\n                              msg._id === updatedMessage._id ? updatedMessage : msg\r\n                            )\r\n                          );\r\n                        })\r\n                        .catch((err) => console.error('Error updating message status:', err));\r\n                    }}\r\n                  >\r\n                    Mark as Resolved\r\n                  </button>\r\n                ) : (\r\n                  'Resolved'\r\n                )}\r\n              </td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AgentDashboard;\r\n\r\n\r\n\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}