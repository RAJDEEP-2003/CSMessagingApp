{"ast":null,"code":"const express = require('express');\nconst mongoose = require('mongoose');\nconst cors = require('cors');\nconst bodyParser = require('body-parser');\nconst messageRoutes = require('./routes/messageRoute'); // Import the message routes\n\nconst app = express();\nconst port = 5000;\n\n// Middleware\napp.use(cors());\napp.use(bodyParser.json()); // Parse incoming JSON requests\n\n// MongoDB connection\nmongoose.connect('mongodb://127.0.0.1:27017/CSMessagingApp', {\n  useNewUrlParser: true,\n  useUnifiedTopology: true\n}).then(() => console.log('MongoDB connected')).catch(err => console.error('MongoDB connection error:', err));\n\n// Use the routes for handling messages\napp.use('/api/messages', messageRoutes);\n\n// Default route for testing\napp.get('/', (req, res) => {\n  res.send('CS Messaging App Backend');\n});\n\n// Start the server\napp.listen(port, () => {\n  console.log(`Server is running on http://localhost:${port}`);\n});","map":{"version":3,"names":["express","require","mongoose","cors","bodyParser","messageRoutes","app","port","use","json","connect","useNewUrlParser","useUnifiedTopology","then","console","log","catch","err","error","get","req","res","send","listen"],"sources":["C:/Users/speak/Desktop/CSMessagingApp/frontend/src/index.js"],"sourcesContent":["const express = require('express');\r\nconst mongoose = require('mongoose');\r\nconst cors = require('cors');\r\nconst bodyParser = require('body-parser');\r\nconst messageRoutes = require('./routes/messageRoute');  // Import the message routes\r\n\r\nconst app = express();\r\nconst port = 5000;\r\n\r\n// Middleware\r\napp.use(cors());\r\napp.use(bodyParser.json());  // Parse incoming JSON requests\r\n\r\n// MongoDB connection\r\nmongoose.connect('mongodb://127.0.0.1:27017/CSMessagingApp', {\r\n  useNewUrlParser: true,\r\n  useUnifiedTopology: true,\r\n})\r\n.then(() => console.log('MongoDB connected'))\r\n.catch((err) => console.error('MongoDB connection error:', err));\r\n\r\n// Use the routes for handling messages\r\napp.use('/api/messages', messageRoutes);\r\n\r\n// Default route for testing\r\napp.get('/', (req, res) => {\r\n  res.send('CS Messaging App Backend');\r\n});\r\n\r\n// Start the server\r\napp.listen(port, () => {\r\n  console.log(`Server is running on http://localhost:${port}`);\r\n});\r\n\r\n\r\n\r\n\r\n\r\n"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAS,CAAC;AAClC,MAAMC,QAAQ,GAAGD,OAAO,CAAC,UAAU,CAAC;AACpC,MAAME,IAAI,GAAGF,OAAO,CAAC,MAAM,CAAC;AAC5B,MAAMG,UAAU,GAAGH,OAAO,CAAC,aAAa,CAAC;AACzC,MAAMI,aAAa,GAAGJ,OAAO,CAAC,uBAAuB,CAAC,CAAC,CAAE;;AAEzD,MAAMK,GAAG,GAAGN,OAAO,CAAC,CAAC;AACrB,MAAMO,IAAI,GAAG,IAAI;;AAEjB;AACAD,GAAG,CAACE,GAAG,CAACL,IAAI,CAAC,CAAC,CAAC;AACfG,GAAG,CAACE,GAAG,CAACJ,UAAU,CAACK,IAAI,CAAC,CAAC,CAAC,CAAC,CAAE;;AAE7B;AACAP,QAAQ,CAACQ,OAAO,CAAC,0CAA0C,EAAE;EAC3DC,eAAe,EAAE,IAAI;EACrBC,kBAAkB,EAAE;AACtB,CAAC,CAAC,CACDC,IAAI,CAAC,MAAMC,OAAO,CAACC,GAAG,CAAC,mBAAmB,CAAC,CAAC,CAC5CC,KAAK,CAAEC,GAAG,IAAKH,OAAO,CAACI,KAAK,CAAC,2BAA2B,EAAED,GAAG,CAAC,CAAC;;AAEhE;AACAX,GAAG,CAACE,GAAG,CAAC,eAAe,EAAEH,aAAa,CAAC;;AAEvC;AACAC,GAAG,CAACa,GAAG,CAAC,GAAG,EAAE,CAACC,GAAG,EAAEC,GAAG,KAAK;EACzBA,GAAG,CAACC,IAAI,CAAC,0BAA0B,CAAC;AACtC,CAAC,CAAC;;AAEF;AACAhB,GAAG,CAACiB,MAAM,CAAChB,IAAI,EAAE,MAAM;EACrBO,OAAO,CAACC,GAAG,CAAC,yCAAyCR,IAAI,EAAE,CAAC;AAC9D,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}