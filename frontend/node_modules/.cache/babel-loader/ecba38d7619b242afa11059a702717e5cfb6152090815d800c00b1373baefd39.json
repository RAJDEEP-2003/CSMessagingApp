{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\speak\\\\Desktop\\\\CSMessagingApp\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// src/App.js\nimport React, { useState, useEffect } from 'react';\nimport MessageForm from './components/MessageForm'; // Import your MessageForm component\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n\n  // Fetch messages when the component mounts\n  useEffect(() => {\n    fetch('http://localhost:5000/api/messages') // Make a GET request to backend API\n    .then(response => response.json()).then(data => setMessages(data)) // Store the fetched messages in state\n    .catch(error => console.error('Error fetching messages:', error));\n  }, []);\n\n  // Handle form submission (send POST request to backend)\n  const handleFormSubmit = formData => {\n    fetch('http://localhost:5000/api/messages', {\n      // POST request to the backend\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(formData) // Send the message data as JSON\n    }).then(response => response.json()).then(data => {\n      // On successful POST request, add the new message to the list\n      setMessages(prevMessages => [...prevMessages, data]);\n    }).catch(error => console.error('Error posting message:', error));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Customer Service Messaging\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MessageForm, {\n      onSubmit: handleFormSubmit\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Messages:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: [message.customer, \":\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 13\n        }, this), \" \", message.message]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"RyA59LRbn9goj/9N7rELX+NWNVI=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","MessageForm","jsxDEV","_jsxDEV","App","_s","messages","setMessages","fetch","then","response","json","data","catch","error","console","handleFormSubmit","formData","method","headers","body","JSON","stringify","prevMessages","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","map","message","index","customer","_c","$RefreshReg$"],"sources":["C:/Users/speak/Desktop/CSMessagingApp/frontend/src/App.js"],"sourcesContent":["// src/App.js\r\nimport React, { useState, useEffect } from 'react';\r\nimport MessageForm from './components/MessageForm';  // Import your MessageForm component\r\n\r\nconst App = () => {\r\n  const [messages, setMessages] = useState([]);\r\n\r\n  // Fetch messages when the component mounts\r\n  useEffect(() => {\r\n    fetch('http://localhost:5000/api/messages')  // Make a GET request to backend API\r\n      .then((response) => response.json())\r\n      .then((data) => setMessages(data))  // Store the fetched messages in state\r\n      .catch((error) => console.error('Error fetching messages:', error));\r\n  }, []);\r\n\r\n  // Handle form submission (send POST request to backend)\r\n  const handleFormSubmit = (formData) => {\r\n    fetch('http://localhost:5000/api/messages', {  // POST request to the backend\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(formData),  // Send the message data as JSON\r\n    })\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        // On successful POST request, add the new message to the list\r\n        setMessages((prevMessages) => [...prevMessages, data]);\r\n      })\r\n      .catch((error) => console.error('Error posting message:', error));\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>Customer Service Messaging</h1>\r\n      <MessageForm onSubmit={handleFormSubmit} />\r\n      <h2>Messages:</h2>\r\n      <ul>\r\n        {messages.map((message, index) => (\r\n          <li key={index}>\r\n            <strong>{message.customer}:</strong> {message.message}\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,WAAW,MAAM,0BAA0B,CAAC,CAAE;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAErD,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;;EAE5C;EACAC,SAAS,CAAC,MAAM;IACdQ,KAAK,CAAC,oCAAoC,CAAC,CAAE;IAAA,CAC1CC,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACnCF,IAAI,CAAEG,IAAI,IAAKL,WAAW,CAACK,IAAI,CAAC,CAAC,CAAE;IAAA,CACnCC,KAAK,CAAEC,KAAK,IAAKC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC,CAAC;EACvE,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAME,gBAAgB,GAAIC,QAAQ,IAAK;IACrCT,KAAK,CAAC,oCAAoC,EAAE;MAAG;MAC7CU,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACL,QAAQ,CAAC,CAAG;IACnC,CAAC,CAAC,CACCR,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACnCF,IAAI,CAAEG,IAAI,IAAK;MACd;MACAL,WAAW,CAAEgB,YAAY,IAAK,CAAC,GAAGA,YAAY,EAAEX,IAAI,CAAC,CAAC;IACxD,CAAC,CAAC,CACDC,KAAK,CAAEC,KAAK,IAAKC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC,CAAC;EACrE,CAAC;EAED,oBACEX,OAAA;IAAAqB,QAAA,gBACErB,OAAA;MAAAqB,QAAA,EAAI;IAA0B;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACnCzB,OAAA,CAACF,WAAW;MAAC4B,QAAQ,EAAEb;IAAiB;MAAAS,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAC3CzB,OAAA;MAAAqB,QAAA,EAAI;IAAS;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAClBzB,OAAA;MAAAqB,QAAA,EACGlB,QAAQ,CAACwB,GAAG,CAAC,CAACC,OAAO,EAAEC,KAAK,kBAC3B7B,OAAA;QAAAqB,QAAA,gBACErB,OAAA;UAAAqB,QAAA,GAASO,OAAO,CAACE,QAAQ,EAAC,GAAC;QAAA;UAAAR,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,KAAC,EAACG,OAAO,CAACA,OAAO;MAAA,GAD9CC,KAAK;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEV,CACL;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAEV,CAAC;AAACvB,EAAA,CA1CID,GAAG;AAAA8B,EAAA,GAAH9B,GAAG;AA4CT,eAAeA,GAAG;AAAC,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}